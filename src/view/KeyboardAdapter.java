/*
 * KeyboardAdapter.java
 */
package view;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
/**
 * This class constructs a key adapter for in-game keyboard controls.
 * @author ddxbugs
 * @version 1.0.0-alpha.1+001
 *
 */
final class KeyboardAdapter extends KeyAdapter {
    
    /** A key bound to rotate the current tetris piece. **/
    private static final int UP = KeyEvent.VK_UP;
    /** A key bound to move the current tetris piece down. **/
    private static final int DOWN = KeyEvent.VK_DOWN;
    /** A key bound to move the current tetris piece left. **/
    private static final int LEFT = KeyEvent.VK_LEFT;
    /** A key bound to move the current tetris piece right. **/
    private static final int RIGHT = KeyEvent.VK_RIGHT;
    
    /** An alternate key bound to rotate the current tetris piece. **/
    private static final char W = 'w';
    /** An alternate key bound to move the current tetris piece left. **/
    private static final char A = 'a';
    /** An alternate key bound to move the current tetris piece down. **/
    private static final char S = 's';
    /** An alternate key bound to move the current tetris piece right. **/
    private static final char D = 'd'; 
     
    /** A key bound to drop the current tetris piece. **/
    private static final int SPACE = KeyEvent.VK_SPACE;
    
    /** A key bound to pause the game. **/
    private static final int PAUSE = KeyEvent.VK_ESCAPE;
 
    /** The current tetris game board. **/
    private final TetrisBoard myTetrisBoard;
    
    /**
     * A default constructor for a key adapter used to control key pressed behavior.
     * @param theBoard The current tetris board game.
     */
    KeyboardAdapter(final TetrisBoard theBoard) {
        super();
        myTetrisBoard = theBoard;
    }
    /**
     * The action fired after a key pressed event.
     * @param theKeyEvent The key event generated by the user.
     */
    @Override
    public void keyPressed(final KeyEvent theKeyEvent) {
        if (myTetrisBoard.getTimer().isRunning()) {
            if (theKeyEvent.getKeyChar() == W 
                            || theKeyEvent.getKeyCode() == UP) {
                myTetrisBoard.getBoard().rotate();
            }
            if (theKeyEvent.getKeyChar() == A 
                            || theKeyEvent.getKeyCode() == LEFT) {
                myTetrisBoard.getBoard().left();
            }
            if (theKeyEvent.getKeyChar() == S 
                            || theKeyEvent.getKeyCode() == DOWN) {
                myTetrisBoard.getBoard().down();
            }
            if (theKeyEvent.getKeyChar() == D 
                            || theKeyEvent.getKeyCode() == RIGHT) {
                myTetrisBoard.getBoard().right();
            }
            if (theKeyEvent.getKeyChar() == SPACE) {
                myTetrisBoard.getBoard().drop();
            }
            if (theKeyEvent.getKeyCode() == PAUSE) {
                myTetrisBoard.getTimer().stop();
            }
        } else if (theKeyEvent.getKeyCode() == PAUSE 
                        && !myTetrisBoard.getTimer().isRunning()) {
            myTetrisBoard.getTimer().start();
        }
    }
}
